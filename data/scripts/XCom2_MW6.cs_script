// ------------------------------------------------------------------------
// GameImageUtil - Tool to process game images
// Copyright (C) 2020 Philip/Scobalula
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------
using System;
using System.IO;
using System.Text;
using System.Numerics;
using PhilLibX.Imaging;

namespace GameImageUtil
{
    /// <summary>
    /// A class to handle reconstructing Z component of a BC5 XY normal map
    /// </summary>
    public class AutomaticProcessor : IFileProcessor
    {
        /// <summary>
        /// Gets the ID of this Processor
        /// </summary>
        public string ID { get { return "T8MaterialToXCom2"; } }

        /// <summary>
        /// Gets the Name of this Processor
        /// </summary>
        public string Name { get { return "MW5/MW6 Material to XCom 2"; } }

        /// <summary>
        /// Processes the provided image
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        public void Process(string file, FileProcessorConfig config)
        {
			var DiffuseTextureName = "";
			var NOGTextureName = "";
			var TintTextureName = "";
			
			// Uses StreamReader to read the xmaterial text file to get the image names of specific categories
			using (var txtReader = new StreamReader(file))
			{
				while (true)
				{
                    string line = txtReader.ReadLine();
                    if (line == null)
                        break;
					
					if (string.IsNullOrEmpty(line))
						continue;
					
                    // Diffuse/Spec
                    if (line.StartsWith("unk_semantic_0x0", StringComparison.InvariantCultureIgnoreCase)) 
                    {
                        String[] strlist = line.Split(new char[] { ',' });
						
						DiffuseTextureName = strlist[1];
						
                        // Move to next line
                        continue;
                    }
					
					// NOG
					if (	line.StartsWith("unk_semantic_0x4", StringComparison.InvariantCultureIgnoreCase))
                    {
                        String[] strlist = line.Split(new char[] { ',' });
						
						NOGTextureName = strlist[1];
						
                        // Move to next line
                        continue;
                    }
					
					// Tint
					if (line.StartsWith("unk_semantic_0x32", StringComparison.InvariantCultureIgnoreCase))
                    {
                        String[] strlist = line.Split(new char[] { ',' });
						
						TintTextureName = strlist[1];
						
                        // Move to next line
                        continue;
                    }
				}
			}
			
			var Filename = Path.GetFileNameWithoutExtension(file).Split(new char[] { '_' });
			
			// Create path to /_images/xmaterial_*/ximage_*
			var DiffPath 	= Path.Combine(Path.GetDirectoryName(file), "_images\\xmaterial_" + Filename[1] + "\\" + DiffuseTextureName + ".tga");
			var NOGPath		= Path.Combine(Path.GetDirectoryName(file), "_images\\xmaterial_" + Filename[1] + "\\" + NOGTextureName + ".tga");
			var TintPath	= Path.Combine(Path.GetDirectoryName(file), "_images\\xmaterial_" + Filename[1] + "\\" + TintTextureName + ".tga");
			
			var ext = config.GetValue("Extension", ".TGA");
            var dxgi = config.GetValue("DXGIFormat", 77);
            var outputPath = config.GetValue("OutputPath", "");
               
			if(string.IsNullOrWhiteSpace(outputPath))
				outputPath = Path.Combine(Path.GetDirectoryName(file), Path.GetFileNameWithoutExtension(file).Split(new string[] { "_n&", "_n_" }, StringSplitOptions.None)[0]);
				
			// Go thru each file and prepare them for XCom 2 export
			using (var DiffImage = new ScratchImage(DiffPath))
			using (var NOGImage = new ScratchImage(NOGPath))
			{
				using (var gMap = new ScratchImage(NOGImage.Metadata))
				using (var oMap = new ScratchImage(NOGImage.Metadata))
				using (var nMap = new ScratchImage(NOGImage.Metadata))
				{
					// Force the image to a standard format
					DiffImage.ConvertImage(ScratchImage.DXGIFormat.R8G8B8A8UNORM);
					// Force the image to a standard format
					NOGImage.ConvertImage(ScratchImage.DXGIFormat.R8G8B8A8UNORM);
					
					for (int x = 0; x < NOGImage.Width; x++)
					{
						for (int y = 0; y < NOGImage.Height; y++)
						{
							// Get Pixel
							var pixel = NOGImage.GetPixel(0, 0, 0, x, y);
					
							// Get Normal and rotate and scale the unit square back to the center diamond
							var normalVector = new Vector2(pixel.Y * 2.0f - 1.0f, pixel.W * 2.0f - 1.0f);
							var xy           = new Vector2(normalVector.X + normalVector.Y, normalVector.X - normalVector.Y) * 0.5f;
							var xyz          = Vector3.Normalize(new Vector3(xy, 1.0f - Math.Abs(xy.X) - Math.Abs(xy.Y)));
					
							// Set new pixels
							gMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.X, 0.0f, 0.0f, 1.0f));
							oMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.Z, 0.0f, 0.0f, 1.0f));
							nMap.SetPixel(0, 0, 0, x, y, new Vector4(xyz.X * 0.5f + 0.5f, xyz.Y * 0.5f + 0.5f, xyz.Z * 0.5f + 0.5f, 1.0f));
						}
					}

					gMap.Resize(DiffImage.Width, DiffImage.Height);
					
					// Build _DIF and _MSK Map
					using (var rgbMap = new ScratchImage(DiffImage.Metadata))
					using (var specMap = new ScratchImage(DiffImage.Metadata))
					{
						for (int x = 0; x < DiffImage.Width; x++)
						{
							for (int y = 0; y < DiffImage.Height; y++)
							{
								// Get Pixel
								var pixel = DiffImage.GetPixel(0, 0, 0, x, y);
								var GlsPxl = gMap.GetPixel(0, 0, 0, x, y);
	
								rgbMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.X, pixel.Y, pixel.Z, 255 - GlsPxl.X)); // Invert Gloss
								specMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.W, pixel.W, 0.0f, 1.0f));
							}
						}
						
						specMap.Resize(NOGImage.Width, NOGImage.Height);
						
						for (int x = 0; x < specMap.Width; x++)
						{
							for (int y = 0; y < specMap.Height; y++)
							{
								// Get Pixel
								var SPCpixel = specMap.GetPixel(0, 0, 0, x, y);
								var AOpixel = oMap.GetPixel(0, 0, 0, x, y);
								
								specMap.SetPixel(0, 0, 0, x, y, new Vector4(SPCpixel.X, AOpixel.X, 0.0f, 1.0f));
							}
						}
						
						if (ext == ".dds")
						{
							rgbMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
							
							specMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
							nMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
						}
				
						rgbMap.Save(outputPath + "_DIF" + ext);
						specMap.Save(outputPath + "_MSK" + ext);
						nMap.Save(outputPath + "_NRM" + ext);
					}
				}
			}
			
			// Build _TNT maps
			if (TintPath != "")
			using (var TintImage = new ScratchImage(TintPath))
			{
					// Force the image to a standard format
					TintImage.ConvertImage(ScratchImage.DXGIFormat.R8G8B8A8UNORM);
	
					using (var tintMap = new ScratchImage(TintImage.Metadata))
					using (var stickerMap = new ScratchImage(TintImage.Metadata))
					{
						for (int x = 0; x < TintImage.Width; x++)
						{
							for (int y = 0; y < TintImage.Height; y++)
							{
								// Get Pixel
								var pixel = TintImage.GetPixel(0, 0, 0, x, y);
	
								tintMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.X, pixel.Y, 0.0f, 1.0f));
								stickerMap.SetPixel(0, 0, 0, x, y, new Vector4(pixel.Z, pixel.W, 0.0f, 1.0f));
							}
						}
						
						if (ext == ".dds")
						{
							tintMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
							stickerMap.ConvertImage((ScratchImage.DXGIFormat)dxgi);
						}
						
						tintMap.Save(outputPath + "_TNT" + ext);
						stickerMap.Save(outputPath + "_TN2" + ext);		
					}
			}	
		}

        /// <summary>
        /// Checks if we can process this file, this is used by the Automatic Processor and does not affect manually selected modes
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        /// <returns>True if we can, otherwise False</returns>
        public bool CanProcessFile(string file, FileProcessorConfig config)
        {
            return (file.Contains("_images"));
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return Name;
        }
    }
}
